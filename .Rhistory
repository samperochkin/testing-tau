})
dev.off()
Tau.tilde
struct$Tau.tilde
plot(struct$dend)
par(mar=c(4,4,1,1))
plot(struct$dend)
order.dendrogram(struct$dend)
clus.mat
dendextend:: struct$dend
clus.mat <- sapply(1:ncol(Y), function(k) cutree(struct$dend,k))
clus.mat <- clus.mat[,clus.mat[1,] != 0]
clus.mat
library(maps)
library(dplyr)
ll <- stns %>% subset(`Station Name` %in% colnames(Y)) %>% select(ID, Country, Lon., Lat., `Station Name`)
names(ll) <- c("ID","COUN","LON","LAT","NAME")
ll <- ll %>% slice(match(colnames(Y),ll$NAME))
poos <- c(3,
2,2,2,4,3,
2,3,
3,
2,4,3,4,2,4,3,1,
3)
clus <- clus.mat[,2]
K <- length(unique(clus))
pal <- rainbow(K)
pie(rep(1,K),col=pal)
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
pdf("C:/Users/Samuel/OneDrive - Université Laval/Samuel-Perreault-111038169/soutenance/Figures-new/map-stations-nes1.pdf", width = 7, height = 3.5)
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
dev.off()
clus <- clus.mat[,4]
clus[clus.mat[,2] == 2] <- match(clus[clus.mat[,2] == 2],unique(clus[clus.mat[,2] == 2]))
clus[clus.mat[,2] != 2] <- max(clus[clus.mat[,2] == 2])+1
K <- length(unique(clus))
pie(rep(1,K-1),col=rainbow(K-1))
pal <- c(rainbow(K-1),"black")
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
pdf("C:/Users/Samuel/OneDrive - Université Laval/Samuel-Perreault-111038169/soutenance/Figures-new/map-stations-nes2.pdf", width = 7, height = 3.5)
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
dev.off()
clus <- clus.mat[,5]
clus[clus.mat[,4] == 2] <- match(clus[clus.mat[,4] == 2],unique(clus[clus.mat[,4] == 2]))
clus[clus.mat[,4] != 2] <- max(clus[clus.mat[,4] == 2])+1
K <- length(unique(clus))
pie(rep(1,K-1),col=rainbow(K-1))
pal <- c(rainbow(K-1),"black")
clus
clus.mat
clus <- clus.mat[,4]
clus[clus.mat[,2] == 2] <- match(clus[clus.mat[,2] == 2],unique(clus[clus.mat[,2] == 2]))
clus[clus.mat[,2] != 2] <- max(clus[clus.mat[,2] == 2])+1
K <- length(unique(clus))
pie(rep(1,K-1),col=rainbow(K-1))
pal <- c(rainbow(K-1),"black")
clus <- clus.mat[,6]
clus[clus.mat[,4] == 2] <- match(clus[clus.mat[,4] == 2],unique(clus[clus.mat[,4] == 2]))
clus[clus.mat[,4] != 2] <- max(clus[clus.mat[,4] == 2])+1
K <- length(unique(clus))
pie(rep(1,K-1),col=rainbow(K-1))
pal <- c(rainbow(K-1),"black")
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
pdf("C:/Users/Samuel/OneDrive - Université Laval/Samuel-Perreault-111038169/soutenance/Figures-new/map-stations-nes3.pdf", width = 7, height = 3.5)
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
dev.off()
clus <- clus.mat[,3]
clus[clus.mat[,2] == 4] <- match(clus[clus.mat[,2] == 4],unique(clus[clus.mat[,2] == 4]))
clus[clus.mat[,2] != 4] <- max(clus[clus.mat[,2] == 4])+1
K <- length(unique(clus))
pie(rep(1,K-1),col=rainbow(K-1))
pal <- c(rainbow(K-1),"black")
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
pdf("C:/Users/Samuel/OneDrive - Université Laval/Samuel-Perreault-111038169/soutenance/Figures-new/map-stations-nes4.pdf", width = 7, height = 3.5)
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
dev.off()
clus.mat
clus <- clus.mat[,5]
clus[clus.mat[,3] == 4] <- match(clus[clus.mat[,3] == 4],unique(clus[clus.mat[,3] == 4]))
clus[clus.mat[,3] != 4] <- max(clus[clus.mat[,3] == 4])+1
K <- length(unique(clus))
pie(rep(1,K-1),col=rainbow(K-1))
pal <- c(rainbow(K-1),"black")
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
pdf("C:/Users/Samuel/OneDrive - Université Laval/Samuel-Perreault-111038169/soutenance/Figures-new/map-stations-nes5.pdf", width = 7, height = 3.5)
par(mfrow=c(1,1))
map("world",
mar=rep(0,4),
fill=TRUE,col="lightgray",xlim = range(ll$LON) + c(-3,15), ylim=range(ll$LAT) + c(-4,4))
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = pal[k], pch = 19, cex = 2)
})
sapply(unique(clus), function(k){
ii <- which(clus == k)
points(ll[ii,c("LON","LAT")], col = "black", pch = 19, cex = .75)
# text(ll[ii,c("LON","LAT")], labels = ii,
#      col = 1,
#      pos = poos[ii],
#      cex = .9)
})
dev.off()
library(data.table)
datasets::iris
datasets::iris3
datasets::AirPassengers
datasets::airmiles
datasets::DNase
Khan
Y <- read.table("*C:\Users\Samuel\Desktop\khan.txt")
Y <- read.table("*C//Users//Samuel//Desktop//khan.txt")
read.table("*C//Users//Samuel//Desktop//khan.txt")
Y <- fread("C:/Users/Samuel/Desktop/khan.txt")
Y
Y <- t(fread("C:/Users/Samuel/Desktop/khan.txt"))
Y
install.packages("pamr")
library("pamr")
pamr.from.excel
Y <- pamr.from.excel("C:/Users/Samuel/Desktop/khan.txt", 65, sample.labels=TRUE)
library("pamr")
library(pamr)
install.packages("pamr")
library(pamr)
pamr.from.excel
Y <- pamr.from.excel("C:/Users/Samuel/Desktop/khan.txt", 65, sample.labels=TRUE)
library(pamr)
Y <- pamr.from.excel("C:/Users/Samuel/Desktop/khan.txt", 65, sample.labels=TRUE)
library(ISLR)
library(data.table)
Khan
Khan$xtrain
Y <- Khan$xtrain
Y
y <- Khan$ytrain
y
d <- ncol(X)
X <- Khan$xtrain
y <- Khan$ytrain
d <- ncol(X)
sample(d,100)
d <- 50
sample(ncol(X),d)
id <- sample(ncol(X),d)
X <- X[,id]
y <- y[id]
y
d <- 50
X <- Khan$xtrain
y <- Khan$ytrain
y
X
d <- 50
id <- sample(ncol(X),d)
X <- X[,id]
source("thesis-application-3/double/structureBuilder2.R")
struct <- structureBuilder(X=X,
hclust_method = "mcquitty",
alpha0 = .05,
alpha1 = .05,
M = 2000)
par(mar=c(15,2,2,2))
plot(struct$dend)
id <- unlist(struct$dend)
oo <- sample(18)
oo <- sample(d)
image(t(cor.fk(X)[rev(oo),oo]), zlim=c(-.1,1))
par(mfrow=c(1,2), mar=c(1,1,1,1))
image(t(cor.fk(Y)[rev(id),id]), zlim=c(-.1,1))
image(t(struct$Tau.tilde[rev(id),id]), zlim=c(-.1,1))
par(mfrow=c(1,2), mar=c(1,1,1,1))
image(t(cor.fk(X)[rev(id),id]), zlim=c(-.1,1))
image(t(struct$Tau.tilde[rev(id),id]), zlim=c(-.1,1))
image(t(cor.fk(X)[rev(id),id]), zlim=c(-1,1))
image(t(cor.fk(X)[rev(id),id]), zlim=c(-.5,1))
zl <- range(cor.fk(X))
zl
zl <- range(cor.fk(X)-diag(d))
zl
image(t(cor.fk(X)[rev(id),id]), zlim=zl)
image(t(struct$Tau.tilde[rev(id),id]), zlim=zl)
par(mfrow=c(1,2), mar=c(1,1,1,1))
image(t(cor.fk(X)[18:1,]), zlim=zl, axes=F)
image(t(cor.fk(X)[d:1,]), zlim=zl, axes=F)
image(t(struct$Tau.tilde[d:1,]), zlim=c(-.1,1), axes=F)
X <- Khan$xtrain
y <- Khan$ytrain
d <- 100
id <- sample(ncol(X),d)
X <- X[,id]
source("thesis-application-3/double/structureBuilder2.R")
struct <- structureBuilder(X=X,
hclust_method = "mcquitty",
alpha0 = .05,
alpha1 = .05,
M = 2000)
par(mar=c(15,2,2,2))
plot(struct$dend)
par(mar=c(2,2,2,2))
plot(struct$dend)
id <- unlist(struct$dend)
id
oo <- sample(d)
image(t(cor.fk(X)[rev(oo),oo]), zlim=c(-.1,1))
par(mfrow=c(1,2), mar=c(1,1,1,1))
zl <- range(cor.fk(X)-diag(d))
image(t(cor.fk(X)[rev(id),id]), zlim=zl)
image(t(struct$Tau.tilde[rev(id),id]), zlim=zl)
struct$dend
struct <- structureBuilder(X=X,
hclust_method = "mcquitty",
alpha0 = .1,
alpha1 = .01,
M = 2000)
setwd("sim-main")
library(data.table)
library(mvtnorm)
library(HAC)
library(pcaPP)
library(Matrix)
source("functions/computeTh.R")
source("functions/buildSigma.R")
source("functions/generateData.R")
source("functions/testEquiRankPlugin.R")
setwd("sim-main")
library(data.table)
library(mvtnorm)
library(HAC)
library(pcaPP)
library(Matrix)
source("functions/computeTh.R")
setwd("C:/Users/Samuel/Gits/testing-tau")
setwd("sim-main")
library(data.table)
library(mvtnorm)
library(HAC)
library(pcaPP)
library(Matrix)
source("functions/computeTh.R")
setwd("sim-main")
setwd("sim-main/")
setwd("sim-main")
library(data.table)
library(mvtnorm)
library(HAC)
library(pcaPP)
library(Matrix)
source("functions/computeTh.R")
source("functions/buildSigma.R")
source("functions/generateData.R")
source("functions/testEquiRankPlugin.R")
source("functionsLow2/computeTh.R")
source("functionsLow/computeTh.R")
setwd("sim-main")
library(data.table)
library(mvtnorm)
library(HAC)
library(pcaPP)
library(Matrix)
source("functions/computeTh.R")
source("functions/buildSigma.R")
setwd("sim-main")
library(data.table)
library(mvtnorm)
library(HAC)
library(pcaPP)
library(Matrix)
source("functions/computeTh.R")
source("functions/buildSigma.R")
source("functions/generateData.R")
source("functions/testEquiRankPlugin.R")
n=100
d=7
k=NULL
tau=.5
dtau=0
distribution="normal"
dtau_type <- "none"
setwd()
getwd()
setwd("sim-main")
library(data.table)
library(mvtnorm)
library(HAC)
library(pcaPP)
library(Matrix)
source("functionsLow2/computeTh.R")
source("functions/buildSigma.R")
source("functions/generateData.R")
source("functions/testEquiRankPlugin.R")
setwd("sim-main")
library(data.table)
library(mvtnorm)
library(HAC)
library(pcaPP)
library(Matrix)
source("functionsLow2/computeTh.R")
source("functionsLow2/buildSigma.R")
source("functionsLow2/generateData.R")
source("functionsLow/computeTh.R")
source("functionsLowBlock2/computeTh.R")
source("sim-main/functionsLowBlock2/computeTh.R")
source("sim-main/functionsLowBlock2/computeSigmaPlugin.R")
source("functions/generateData.R")
source("sim-main/functions/generateData.R")
source("sim-main/functionsLowBlock2/generateData.R")
source("sim-main/functions/testEquiRankPlugin.R")
source("sim-main/functionsLowBlock2/testEquiRankPlugin.R")
n=100
d=6
k=NULL
tau=.5
dtau=0
distribution="normal"
dtau_type <- "none"
X <- generateData(n,d,tau,dtau,dtau_type,distribution)
sapply(list.files("sim-main/functionsLowBlock2/computeSigmaPlugin.R",full.names = T), source)
sapply(list.files("sim-main/functionsLowBlock2/",full.names = T), source)
n=100
d=6
k=NULL
tau=.5
dtau=0
distribution="normal"
dtau_type <- "none"
X <- generateData(n,d,tau,dtau,dtau_type,distribution)
tau
X <- generateData(n,d,tau,dtau,dtau_type,distribution)
X <- generateData(n,d,tau,dtau,dtau_type,distribution)
X <- generateData(n,d,tau,dtau,dtau_type,distribution)
generateData
X <- generateData(n,d,design=c(1,1,1,2,2,3),tau,dtau,dtau_type,distribution)
X <- generateData(n,d,design=c(1,1,1,2,2,3),tau,dtau,dtau_type)
generateData(n,d,design=c(1,1,1,2,2,3),tau,dtau,dtau_type)
X <- generateData(n,d,design="equi",tau,dtau,dtau_type)
X <- generateData(n,d,design="equi",tau,dtau,dtau_type,distribution)
X <- generateData(n,d,"equi",dtau,dtau_type,distribution)
library("mvtnorm")
X <- generateData(n,d,"equi",dtau,dtau_type,distribution)
X
n=100
d=8
k=NULL
n=100
d=9
k=NULL
tau=.5
distribution="normal"
dtau_type <- "none"
library("mvtnorm")
X <- generateData(n,d,"equi",dtau,dtau_type,distribution)
X
p <- d*(d-1)/2
ij.mat <- t(combn(d,2))
ij.l.mat <- matrix(0,d,d)
ij.l.mat[rbind(ij.mat,ij.mat[,2:1])] <- 1:p
# computation of estimates ------------------------------------------------
Tau.hat <- cor.fk(X[,1:d])
t.bar <- mean(Tau.hat[ij.mat])
